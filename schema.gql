# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type NestedWork {
  id: String!
  title: String!
  tags: [String!]!
  logoURL: String!
  readmeURL: String!
  sourceCodeURL: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  isPublish: Boolean!
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: String!
  name: String!
  works: [NestedWork!]!
  createdAt: DateTime!
}

type Work {
  id: String!
  title: String!
  tags: [String!]!
  logoURL: String!
  readmeURL: String!
  sourceCodeURL: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  isPublish: Boolean!
  user: User!
  userId: String!
}

type Query {
  findUserById(where: UserWhereUniqueInput!): User
  findUsers(where: UserWhereInput, orderBy: [UserOrderInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int): [User!]!
  findWorkById(where: WorkWhereUniqueInput!): Work
  findWorks(where: WorkWhereInput, orderBy: [WorkOrderInput!], cursor: WorkWhereUniqueInput, take: Int, skip: Int): [Work!]!
}

input UserWhereUniqueInput {
  id: String!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  name: StringFilter
  works: WorkListRelationFilter
  createdAt: DateTimeFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input WorkListRelationFilter {
  every: WorkWhereInput
  some: WorkWhereInput
  none: WorkWhereInput
}

input WorkWhereInput {
  AND: [WorkWhereInput!]
  OR: [WorkWhereInput!]
  NOT: [WorkWhereInput!]
  id: StringFilter
  title: StringFilter
  tags: StringNullableListFilter
  logoURL: StringFilter
  readmeURL: StringFilter
  sourceCodeURL: StringNullableListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  publishedAt: DateTimeNullableFilter
  isPublish: BoolFilter
  user: UserRelationFilter
  userId: StringFilter
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserOrderInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
}

enum SortOrder {
  asc
  desc
}

input WorkWhereUniqueInput {
  id: String!
}

input WorkOrderInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  publishedAt: SortOrder
  isPublish: SortOrder
  userId: SortOrder
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User!
  createWork(data: WorkCreateInput!): Work!
  updateWork(where: WorkWhereUniqueInput!, data: WorkUpdateInput!): Work!
  deleteWork(where: WorkWhereUniqueInput!): Work!
}

input UserCreateInput {
  id: String!
  name: String!
  works: [WorkInput!] = []
  createdAt: DateTime
}

input WorkInput {
  id: String!
  title: String!
  tags: [String!]!
  logoURL: String!
  readmeURL: String!
  sourceCodeURL: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime!
  isPublish: Boolean!
  userId: String!
}

input UserUpdateInput {
  name: String!
}

input WorkCreateInput {
  title: String!
  tags: [String!]!
  logoURL: String!
  readmeURL: String!
  sourceCodeURL: [String!]!
  createdAt: DateTime
  isPublish: Boolean = false
  userId: String!
}

input WorkUpdateInput {
  title: String
  tags: [String!]
  sourceCodeURL: [String!]
  isPublish: Boolean
}